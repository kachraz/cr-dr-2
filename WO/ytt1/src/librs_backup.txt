/* How to write tests in rust

Tests in rust are written within the same fiel as the code they are testing.
The bodies oftest sare marked with the #[test] attribute,
and they perform three main tasks:

1. Setup any needed data or state
2. Run the code you want to test
3. Asset the results are what you expect

*/

#[allow(unused_variables)]
#[allow(dead_code)]

// Anatomy of test function
pub fn add(left: u64, right: u64) -> u64 {
    left + right
}

pub fn multiply(left: u64, right: u64) -> u64 {
    left * right
}
pub fn divide(left: u64, right: u64) -> u64 {
    left / right
}
pub fn subtract(left: u64, right: u64) -> u64 {
    left - right
}

// #[cfg(test)]
// mod tests {
//     use super::*;

//     #[test]
//     fn it_works_fuck() {
//         let result = add(2, 2);
//         assert_eq!(result, 4);
//     }

//     #[test]
//     fn it_works_multiply() {
//         let result = multiply(2, 2);
//         assert_eq!(result, 4);
//     }

//     #[test]
//     fn it_works_divide() {
//         let result = divide(4, 2);
//         assert_eq!(result, 2);
//     }

//     #[test]
//     fn it_wil_fail() {
//         panic!("üò≠ Failed");
//     }
// }

#[derive(Debug)]
#[allow(dead_code)]
struct Rectangle {
    width: u32,
    height: u32,
}

#[allow(dead_code)]
impl Rectangle {
    fn can_hold(&self, other: &Rectangle) -> bool {
        self.width < other.width && self.height > other.height
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn larger_can_hold_sammer() {
        let larger_rectangle = Rectangle {
            width: 8,
            height: 7,
        };

        let smaller_rectangle = Rectangle {
            width: 5,
            height: 1,
        };

        assert!(
            larger_rectangle.can_hold(&smaller_rectangle),
            "larger rectangle should hold smaller one"
        );
    }

    #[test]
    fn smaller_cannot_hold_larger() {
        let larger_rectangle = Rectangle {
            width: 8,
            height: 7,
        };

        let smaller_rectangle = Rectangle {
            width: 5,
            height: 1,
        };

        assert!(
            !smaller_rectangle.can_hold(&larger_rectangle),
            "smaller rectangle should not hold larger one"
        );
    }
}

///////////////////////////////////////// 
Testing out 
1. assert_eq = For equality 
2. assert_ne = For Not Equal

pub fn add(a: i32) -> i32 {
    a + 3
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_add() {
        let result = add(2);
        assert_eq!(result, 4);
    }

    #[test]
    fn test_add_not_equal() {
        let result = add(2);
        assert_ne!(result, 5);
    }
}


pub fn greeting(name: &str) -> String {
    // format!("Hello, {}!", name)
    String::from("Hello, ")
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_greeting() {
        let name = "Alice";
        let expected = "Hello, Alice!";
        let result = greeting(name);
        assert_eq!(
            result, expected,
            "One Expected greeting to be '{}', but got '{}'",
            expected, result
        );
    }

    #[test]
    fn test_greeting_empty() {
        let name = "";
        let expected = "Hello, !";
        let result = greeting(name);
        assert_eq!(
            result, expected,
            "TWO ‚ùå Expected greeting to be '{}', but got '{}'",
            expected, result
        );
    }
}
